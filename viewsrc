#!/bin/bash

verbose=0
error=1

usage() {
	local code=1
	local progname
	progname="$(basename -- "$0")"
	if [ "$1" = "-0" ]; then
		code=0
		shift
	fi
	if [ "$#" != 0 ]; then
		printf "\033[1m%b\033[0m\n" "$@" 1>&2
	fi
	printf "%b\033[0m\n" "\033[1;36mviewsrc"\
	"View source code easily - no need to type \033[1myoureditor \$(which command)\033[0m over and over again!"\
	"${progname} [commands]"\
	"    View source code of [commands]"\
	"    Eg  ${progname} apt"\
	"${progname} -h|--help"\
	"    Help message"\
	"${progname} --set-editor [editor]"\
	"    Remembers to use [editor] to open files, defaults to nano, preferences are saved to ~/.viewsrc" 1>&2
	exit "$code"
}

info() {
	if [ "$1" == "-v" ]; then
		if [ "$verbose" != 1 ]; then
			return
		fi
		shift
	fi
	printf "%b\033[0m\n" "$@"
}

set_editor() {
	echo "editor=\"$1\"" > ~/.viewsrc
	info "Editor set to $1"
}

get_editor() {
	unset editor
	if [ -f ~/.viewsrc ]; then
		source ~/.viewsrc
	else
		editor="nano"
	fi
	if [[ ! -v editor ]]; then
		info "Editor not set in .viewsrc, resetting to nano"
		editor="nano"
	fi
	info -v "Editor set to $editor"
}

if [ "$#" = 0 ]; then
	usage -0
fi

commands=()
while [ "$#" != 0 ]; do
	case "$1" in
		-h | --help)
			usage -0
			;;
		-v | --verbose)
			verbose=1
			;;
		--ignore-error)
			error=0
			;;
		--set-editor)
			shift
			if [ "$1" = "" ]; then
				info "Expecting editor, resetting to nano"
				set_editor nano
			else
				set_editor "$1"
			fi
			;;
		--clean)
			if [ -f ~/.viewsrc ]; then
				rm ~/.viewsrc
				info "Removed ~/.viewsrc, editor defaults to nano"
			fi
			;;
		*)
			commands+=("$1")
			;;
	esac
	shift
done

get_editor
paths=()
for command in "${commands[@]}"; do
	path="$(which "$command")"
	code="$?"
	if [ "$code" = 0 ]; then
		paths+=("$path")
		info -v "Command $command found in $path"
	else
		info "Command $command not found"
		[ "$error" = 1 ] && exit "$code"
	fi
done
if [ "${#paths}" = 0 ]; then
	exit 0
fi
"$editor" "${paths[@]}"